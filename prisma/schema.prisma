// Modelo para ingresos (income)
model Income {
  id         String   @id @default(uuid())
  date       DateTime @default(now())
  source     String
  amount     Float    // Monto total con IVA
  netAmount  Float    // Neto sin IVA
  ivaAmount  Float    // IVA
  description String?
}
// Modelo para egresos (expenses)
model Expense {
  id          String   @id @default(uuid())
  date        DateTime @default(now())
  category    String
  amount      Float
  hasInvoice  Boolean  @default(false)
  description String?
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Habilitar extensiones si son necesarias
  // extensions = [pgcrypto, uuid_ossp]
}

// Modelo de usuario para autenticación
model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String   // En producción, esto debería estar hasheado
  email     String?  @unique
  role      String   @default("user")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Modelo para el inventario
model InventoryItem {
  id                String   @id @default(uuid())
  name              String
  quantity          Int
  purchasePrice     Int
  description       String?
  sku               String?  @unique
  supplier          String?
  size              String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relación inversa para ProductComponent
  productComponents ProductComponent[]

  @@map("inventory_items")
}

// Resto del esquema...

model SellableProduct {
  id                     String    @id @default(uuid())
  name                   String
  description            String?
  desiredProfitMargin    Float     // O Decimal si necesitas precisión exacta
  totalComponentCost     Float     // O Decimal
  netSalePriceWithoutIVA Float     // O Decimal
  ivaAmountOnSale        Float     // O Decimal
  finalSalePriceWithIVA  Float     // O Decimal
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  components             ProductComponent[] // Relación uno-a-muchos con ProductComponent

  @@map("sellable_products")
}

model ProductComponent {
  id                              String  @id @default(uuid())
  itemName                        String  // Nombre del ítem en el momento del ensamblaje
  quantity                        Int     // Cantidad de este ítem usada en el producto vendible
  purchasePriceAtTimeOfAssembly   Float   // Precio de compra en el momento del ensamblaje (O Decimal)

  sellableProduct    SellableProduct @relation(fields: [sellableProductId], references: [id])
  sellableProductId  String          // Foreign key para SellableProduct

  // Relación opcional con un InventoryItem específico en el momento del ensamblaje
  inventoryItem      InventoryItem? @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId    String?         // Foreign key opcional para InventoryItem

  @@map("product_components")
}

// Añadir relación inversa a InventoryItem
// model InventoryItem {
//   id                String   @id @default(uuid())
//   name              String
//   quantity          Int
//   purchasePrice     Int      // Considera usar Decimal para precios
//   description       String?
//   sku               String?  @unique
//   supplier          String?
//   size              String?
//   createdAt         DateTime @default(now())
//   updatedAt         DateTime @updatedAt
  
//   // Relación inversa para ProductComponent (opcional, pero útil)
//   productComponents ProductComponent[]

//   @@map("inventory_items")
// }

model CompanySettings {
  id        Int     @id @default(1)
  nombre    String
  rut       String
  telefono  String
  correo    String
  direccion String
  logoUrl   String?
}

model Order {
  id             String        @id @default(uuid())
  orderDate      DateTime      @default(now())
  customerName   String?
  rut            String?
  telefono       String?
  status         OrderStatus   @default(COTIZACION_ENVIADA)
  description    String?
  items          OrderItem[]
  totalAmount    Float         // Total con IVA
  totalNetAmount Float         // Neto sin IVA
  totalIvaAmount Float         // IVA
}

enum OrderStatus {
  COTIZACION_ENVIADA
  RECIBIDO
  ELABORADO
  COMPLETADO
  ANULADO
}

model OrderItem {
  id           String   @id @default(uuid())
  order        Order    @relation(fields: [orderId], references: [id])
  orderId      String
  productId    String?  // Relación opcional a inventario
  productName  String
  quantity     Int
  unitPriceWithVat Float
  netUnitPrice     Float
}

