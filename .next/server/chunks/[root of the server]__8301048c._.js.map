{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ferna/Desktop/cvision/src/lib/db.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\n// Evita múltiples instancias de Prisma en desarrollo\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\n\nexport const prisma =\n  globalForPrisma.prisma ||\n  new PrismaClient({\n    log: ['query'],\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n\nexport default prisma;\n"],"names":[],"mappings":";;;;AAAA;;AAEA,qDAAqD;AACrD,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD","debugId":null}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ferna/Desktop/cvision/src/app/api/inventory/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/db';\n\ninterface InventoryItem {\n  id: string;\n  name: string;\n  quantity: number;\n  purchasePrice: number;\n  description: string | null;\n  sku: string | null;\n  supplier: string | null;\n  size: string | null;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport async function GET() {\n  try {\n    const items = await prisma.inventoryItem.findMany({\n      orderBy: { name: 'asc' }\n    });\n    \n    return NextResponse.json(items);\n  } catch (error) {\n    console.error('Error fetching inventory items:', error);\n    return NextResponse.json(\n      { error: 'Error al obtener el inventario' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const data = await request.json();\n    \n    const newItem = await prisma.inventoryItem.create({\n      data: {\n        name: data.name,\n        quantity: Number(data.quantity) || 0,\n        purchasePrice: Number(data.purchasePrice) || 0,\n        description: data.description?.trim() || null,\n        sku: data.sku?.trim() || null,\n        supplier: data.supplier?.trim() || null,\n        size: data.size?.trim() || null,\n      }\n    });\n    \n    return NextResponse.json({\n      ...newItem,\n      id: String(newItem.id)\n    });\n  } catch (error) {\n    console.error('Error creating inventory item:', error);\n    return NextResponse.json(\n      { error: 'Error al crear el artículo del inventario' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAeO,eAAe;IACpB,IAAI;QACF,MAAM,QAAQ,MAAM,kHAAA,CAAA,SAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;YAChD,SAAS;gBAAE,MAAM;YAAM;QACzB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiC,GAC1C;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,MAAM,UAAU,MAAM,kHAAA,CAAA,SAAM,CAAC,aAAa,CAAC,MAAM,CAAC;YAChD,MAAM;gBACJ,MAAM,KAAK,IAAI;gBACf,UAAU,OAAO,KAAK,QAAQ,KAAK;gBACnC,eAAe,OAAO,KAAK,aAAa,KAAK;gBAC7C,aAAa,KAAK,WAAW,EAAE,UAAU;gBACzC,KAAK,KAAK,GAAG,EAAE,UAAU;gBACzB,UAAU,KAAK,QAAQ,EAAE,UAAU;gBACnC,MAAM,KAAK,IAAI,EAAE,UAAU;YAC7B;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,GAAG,OAAO;YACV,IAAI,OAAO,QAAQ,EAAE;QACvB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4C,GACrD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}